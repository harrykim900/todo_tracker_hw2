[{"C:\\Users\\Harry\\Documents\\SBU\\CSE316\\todo_tracker_hw2\\src\\index.js":"1","C:\\Users\\Harry\\Documents\\SBU\\CSE316\\todo_tracker_hw2\\src\\App.js":"2","C:\\Users\\Harry\\Documents\\SBU\\CSE316\\todo_tracker_hw2\\src\\reportWebVitals.js":"3","C:\\Users\\Harry\\Documents\\SBU\\CSE316\\todo_tracker_hw2\\src\\components\\Workspace.js":"4","C:\\Users\\Harry\\Documents\\SBU\\CSE316\\todo_tracker_hw2\\src\\common\\jsTPS.js":"5","C:\\Users\\Harry\\Documents\\SBU\\CSE316\\todo_tracker_hw2\\src\\components\\Navbar.js":"6","C:\\Users\\Harry\\Documents\\SBU\\CSE316\\todo_tracker_hw2\\src\\components\\LeftSidebar.js":"7","C:\\Users\\Harry\\Documents\\SBU\\CSE316\\todo_tracker_hw2\\src\\components\\ToDoItem.js":"8","C:\\Users\\Harry\\Documents\\SBU\\CSE316\\todo_tracker_hw2\\src\\components\\ListLink.js":"9"},{"size":557,"mtime":1615406745494,"results":"10","hashOfConfig":"11"},{"size":4120,"mtime":1616196120950,"results":"12","hashOfConfig":"11"},{"size":375,"mtime":1615406745494,"results":"13","hashOfConfig":"11"},{"size":2034,"mtime":1616195899747,"results":"14","hashOfConfig":"11"},{"size":6712,"mtime":1615406745490,"results":"15","hashOfConfig":"11"},{"size":431,"mtime":1616178216816,"results":"16","hashOfConfig":"11"},{"size":1861,"mtime":1616190631333,"results":"17","hashOfConfig":"11"},{"size":2034,"mtime":1616196390624,"results":"18","hashOfConfig":"11"},{"size":952,"mtime":1615406745491,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1t130s5",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\Harry\\Documents\\SBU\\CSE316\\todo_tracker_hw2\\src\\index.js",[],["42","43"],"C:\\Users\\Harry\\Documents\\SBU\\CSE316\\todo_tracker_hw2\\src\\App.js",["44"],"C:\\Users\\Harry\\Documents\\SBU\\CSE316\\todo_tracker_hw2\\src\\reportWebVitals.js",[],"C:\\Users\\Harry\\Documents\\SBU\\CSE316\\todo_tracker_hw2\\src\\components\\Workspace.js",["45"],"C:\\Users\\Harry\\Documents\\SBU\\CSE316\\todo_tracker_hw2\\src\\common\\jsTPS.js",["46","47"],"'use strict'\r\n\r\n/**\r\n * jsTPS_Transaction\r\n * \r\n * This provides the basic structure for a transaction class. Note to use\r\n * jsTPS one should create objects that define these two methods, doTransaction\r\n * and undoTransaction, which will update the application state accordingly.\r\n * \r\n * @author THE McKilla Gorilla (accept no imposters)\r\n * @version 1.0\r\n */\r\nexport class jsTPS_Transaction {\r\n    /**\r\n     * This method is called by jTPS when a transaction is executed.\r\n     */\r\n    doTransaction() {\r\n        console.log(\"doTransaction - MISSING IMPLEMENTATION\");\r\n    }\r\n    \r\n    /**\r\n     * This method is called by jTPS when a transaction is undone.\r\n     */\r\n    undoTransaction() {\r\n        console.log(\"undoTransaction - MISSING IMPLEMENTATION\");\r\n    }\r\n}\r\n\r\n/**\r\n * jsTPS\r\n * \r\n * This class serves as the Transaction Processing System. Note that it manages\r\n * a stack of jsTPS_Transaction objects, each of which know how to do or undo\r\n * state changes for the given application. Note that this TPS is not platform\r\n * specific as it is programmed in raw JavaScript.\r\n */\r\nexport default class jsTPS {\r\n    constructor() {\r\n        // THE TRANSACTION STACK\r\n        this.transactions = [];\r\n\r\n        // THE TOTAL NUMBER OF TRANSACTIONS ON THE STACK,\r\n        // INCLUDING THOSE THAT MAY HAVE ALREADY BEEN UNDONE\r\n        this.numTransactions = 0;\r\n\r\n        // THE INDEX OF THE MOST RECENT TRANSACTION, NOTE THAT\r\n        // THIS MAY BE IN THE MIDDLE OF THE TRANSACTION STACK\r\n        // IF SOME TRANSACTIONS ON THE STACK HAVE BEEN UNDONE\r\n        // AND STILL COULD BE REDONE.\r\n        this.mostRecentTransaction = -1;\r\n\r\n        // THESE STATE VARIABLES ARE TURNED ON AND OFF WHILE\r\n        // TRANSACTIONS ARE DOING THEIR WORK SO AS TO HELP\r\n        // MANAGE CONCURRENT UPDATES\r\n        this.performingDo = false;\r\n        this.performingUndo = false;\r\n    }\r\n\r\n    /**\r\n     * isPerformingDo\r\n     * \r\n     * Accessor method for getting a boolean representing whether or not\r\n     * a transaction is currently in the midst of a do/redo operation.\r\n     */\r\n    isPerformingDo() {\r\n        return this.performingDo;\r\n    }\r\n\r\n    /**\r\n     * isPerformingUndo\r\n     * \r\n     * Accessor method for getting a boolean representing whether or not\r\n     * a transaction is currently in the midst of an undo operation.\r\n     */\r\n    isPerformingUndo() {\r\n        return this.performingUndo;\r\n    }\r\n\r\n    /**\r\n     * getSize\r\n     * \r\n     * Accessor method for getting the number of transactions on the stack.\r\n     */\r\n    getSize() {\r\n        return this.transactions.length;\r\n    }\r\n\r\n    /**\r\n     * getRedoSize\r\n     * \r\n     * Method for getting the total number of transactions on the stack\r\n     * that can possibly be redone.\r\n     */\r\n    getRedoSize() {\r\n        return this.getSize() - this.mostRecentTransaction - 1;\r\n    }\r\n\r\n    /**\r\n     * getUndoSize\r\n     * \r\n     * Method for getting the total number of transactions on the stack\r\n     * that can possible be undone.\r\n     */\r\n    getUndoSize() {\r\n        return this.mostRecentTransaction + 1;\r\n    }\r\n\r\n    /**\r\n     * hasTransactionToRedo\r\n     * \r\n     * Method for getting a boolean representing whether or not\r\n     * there are transactions on the stack that can be redone.\r\n     */\r\n    hasTransactionToRedo() {\r\n        return (this.mostRecentTransaction+1) < this.numTransactions;\r\n    }\r\n\r\n    /**\r\n     * hasTransactionToUndo\r\n     * \r\n     * Method for getting a boolean representing whehter or not\r\n     * there are transactions on the stack that can be undone.\r\n     */\r\n    hasTransactionToUndo() {\r\n        return this.mostRecentTransaction >= 0;\r\n    }\r\n\r\n    /**\r\n     * addTransaction\r\n     * \r\n     * Method for adding a transaction to the TPS stack, note it\r\n     * also then does the transaction.\r\n     * \r\n     * @param {jsTPS_Transaction} transaction Transaction to add to the stack and do.\r\n     */\r\n    addTransaction(transaction) {\r\n        // ARE WE BRANCHING?\r\n        if ((this.mostRecentTransaction < 0) \r\n            || (this.mostRecentTransaction < (this.transactions.length - 1))) {\r\n                for (let i = this.transactions.length - 1; i > this.mostRecentTransaction; i--) {\r\n                    this.transactions.splice(i, 1);\r\n                }\r\n                this.numTransactions = this.mostRecentTransaction + 2;\r\n        }\r\n        else {\r\n            this.numTransactions++;\r\n        }\r\n\r\n        // ADD THE TRANSACTION\r\n        this.transactions[this.mostRecentTransaction+1] = transaction;\r\n\r\n        // AND EXECUTE IT\r\n        this.doTransaction();\r\n    }\r\n\r\n    /**\r\n     * doTransaction\r\n     * \r\n     * Does the current transaction on the stack and advances the transaction\r\n     * counter. Note this function may be invoked as a result of either adding\r\n     * a transaction (which also does it), or redoing a transaction.\r\n     */\r\n    doTransaction() {\r\n        if (this.hasTransactionToRedo()) {\r\n            this.performingDo = true;\r\n            let transaction = this.transactions[this.mostRecentTransaction+1];\r\n            transaction.doTransaction();\r\n            this.mostRecentTransaction++;\r\n            this.performingDo = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function gets the most recently executed transaction on the \r\n     * TPS stack and undoes it, moving the TPS counter accordingly.\r\n     */\r\n    undoTransaction() {\r\n        if (this.hasTransactionToUndo()) {\r\n            this.performingUndo = true;\r\n            let transaction = this.transactions[this.mostRecentTransaction];\r\n            transaction.undoTransaction();\r\n            this.mostRecentTransaction--;\r\n            this.performingUndo = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * clearAllTransactions\r\n     * \r\n     * Removes all the transactions from the TPS, leaving it with none.\r\n     */\r\n    clearAllTransactions() {\r\n        // REMOVE ALL THE TRANSACTIONS\r\n        this.transactions = new Array();\r\n        \r\n        // MAKE SURE TO RESET THE LOCATION OF THE\r\n        // TOP OF THE TPS STACK TOO\r\n        this.mostRecentTransaction = -1;      \r\n        this.numTransactions = 0; \r\n    }\r\n\r\n    /**\r\n     * toString\r\n     * \r\n     * Builds and returns a textual represention of the full TPS and its stack.\r\n     */\r\n    toString() {        \r\n        let text = \"--Number of Transactions: \" + this.numTransactions + \"\\n\";\r\n        text += \"--Current Index on Stack: \" + this.mostRecentTransaction + \"\\n\";\r\n        text += \"--Current Transaction Stack:\\n\";\r\n        for (let i = 0; i <= this.mostRecentTransaction; i++) {\r\n            let jT = this.transactions[i];\r\n            text += \"----\" + jT.toString() + \"\\n\";\r\n        }\r\n        return text;        \r\n    }\r\n}","C:\\Users\\Harry\\Documents\\SBU\\CSE316\\todo_tracker_hw2\\src\\components\\Navbar.js",["48"],"// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\r\nimport React, { Component } from 'react'\r\n\r\nclass Navbar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"navbar\">\r\n                <div id=\"title-div\">\r\n                    Todo Tracker\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;","C:\\Users\\Harry\\Documents\\SBU\\CSE316\\todo_tracker_hw2\\src\\components\\LeftSidebar.js",["49"],"// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\r\nimport React, { Component } from 'react';\r\nimport ListLink from './ListLink'\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport Undo from '@material-ui/icons/Undo';\r\nimport Redo from '@material-ui/icons/Redo';\r\n\r\nclass LeftSidebar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    handleAddNewList = () => {\r\n        this.props.addNewListCallback();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"left-sidebar\">\r\n                <div id=\"left-sidebar-header\" class=\"section-header\">\r\n                    <span class=\"left-sidebar-header-text\">Todolists</span>\r\n                    <span class=\"left-sidebar-controls\" id=\"add-undo-redo-box\">\r\n                        <AddBox \r\n                            id=\"add-list-button\"\r\n                            className=\"material-icons todo_button\"\r\n                            onClick={this.handleAddNewList} />\r\n                        <Undo id=\"undo-button\" className=\"list-item-control material-icons todo-button\" />\r\n                        <Redo id=\"redo-button\" className=\"list-item-control material-icons todo-button\" />\r\n                        \r\n                    </span>\r\n                </div>\r\n                <div id=\"todo-lists-list\">\r\n                {\r\n                    this.props.toDoLists.map((toDoList) => (\r\n                        <ListLink\r\n                            key={toDoList.id}\r\n                            toDoList={toDoList}                                // PASS THE LIST TO THE CHILDREN\r\n                            loadToDoListCallback={this.props.loadToDoListCallback} />  // PASS THE CALLBACK TO THE CHILDREN\r\n                    ))\r\n                }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LeftSidebar;","C:\\Users\\Harry\\Documents\\SBU\\CSE316\\todo_tracker_hw2\\src\\components\\ToDoItem.js",["50"],"C:\\Users\\Harry\\Documents\\SBU\\CSE316\\todo_tracker_hw2\\src\\components\\ListLink.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":10,"column":1,"nodeType":"57","messageId":"58","endLine":13,"endColumn":4},{"ruleId":"59","severity":1,"message":"60","line":9,"column":5,"nodeType":"61","messageId":"62","endLine":11,"endColumn":6},{"ruleId":"63","severity":1,"message":"64","line":1,"column":1,"nodeType":"65","messageId":"66","endLine":1,"endColumn":13,"fix":"67"},{"ruleId":"68","severity":1,"message":"69","line":194,"column":29,"nodeType":"70","messageId":"71","endLine":194,"endColumn":40},{"ruleId":"59","severity":1,"message":"60","line":5,"column":5,"nodeType":"61","messageId":"62","endLine":7,"endColumn":6},{"ruleId":"59","severity":1,"message":"60","line":9,"column":5,"nodeType":"61","messageId":"62","endLine":11,"endColumn":6},{"ruleId":"72","severity":1,"message":"73","line":32,"column":54,"nodeType":"74","endLine":32,"endColumn":76},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"77","text":"78"},"no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",[0,12],""]